/* Base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.flex-container {
  border: 10px solid #7f00ff;
}

.flex-item {
  padding: 10px;
  font: 900 60px "Roboto", sans-serif;
  color: #fff;
  text-align: center;
  text-shadow: 4px 2px 0 rgba(0, 0, 0, 0.2);
}

.item-1 {
  background-image: linear-gradient(45deg, #ff8177, #cf556c);
}

.item-2 {
  background: linear-gradient(45deg, #84fab0, #8fd3f4);
}

.item-3 {
  background: linear-gradient(45deg, #a6c0fe, #f68084);
}

.item-4 {
  background: linear-gradient(45deg, #d4fc79, #96e6a1);
}

.item-5 {
  background: linear-gradient(45deg, #43e97b, #38f9d7);
}

.item-6 {
  background: linear-gradient(45deg, #a18cd1, #fbc2eb);
}

.item-7 {
  background: linear-gradient(45deg, #8e2de2, #4a00e0);
}

.item-8 {
  background: linear-gradient(45deg, #e1eec3, #f05053);
}

/* Custom styles */
.flex-container {
  display: flex;
}


.flex-item {
  width: 300px;
  /* є скорочений варіант flex: flex-grow flex-shrink flex-basis */
}
/* flex-shrink - скільки вільного простору може дати елемент при необхідності. Іншими словами чи готовий від поділитися розміром, коли сусідам не хватить місця
   Це цікаво. Ширина у елементів по 300px. Вони не займуть всю ширину батьківського контейнера. Процес почнеться, коли я почну зменшувати вікно браузера
   Тут теж все у пропорціях. .item-3 з flex-shrink: 3; почне скукожуватись найсильніше, в той час коли .item-1 з flex-shrink: 1; буде найбільшим і віддасть свій розмір, коли вікно браузера буде дуже мале  */
.item-1 {
  flex-shrink: 1; /* Значення 0 взагалі не дасть елементу скукожуватись */
  /* flex-basis: 300px; - дефолтний розмір елементи - Працює по основній осі. альтернатива width: 300px; або height: 300px в залежності від основної осі */
}
.item-2 {
  flex-shrink:  2;
}
.item-3 {
  flex-shrink: 3;
}
